{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Progressbar","text":"<p><code>Progressbar</code> is a console-based progress bar for Java with minimal runtime overhead.</p>"},{"location":"#installation","title":"Installation","text":"<p>Depending on your build tool, add the following setting.</p> MavenGradle <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;me.tongfei&lt;/groupId&gt;\n&lt;artifactId&gt;progressbar&lt;/artifactId&gt;\n&lt;version&gt;0.10.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>compile 'me.tongfei:progressbar:0.10.0'\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<pre><code>import me.tongfei.progressbar.*;\n</code></pre> <p>And then refer to Declarative usage or Imperative usage, two flavors of using a progress bar.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>Changelog</p>"},{"location":"builder/","title":"Progress bar builders","text":"<p>Since <code>0.7.0</code>, apart from standard constructors, you can also use the so-called builder pattern to customize a progress bar.</p> <p>All <code>setXXX()</code> (also <code>showSpeed</code>) clauses below are optional. </p> <pre><code>ProgressBarBuilder pbb = ProgressBar.builder()\n.setInitialMax(&lt;initial max&gt;)\n.setStyle(ProgressBarStyle.&lt;style&gt;)\n.setTaskName(&lt;taskName name&gt;)\n.setUnit(&lt;unit name&gt;, &lt;unit size&gt;)\n.setUpdateIntervalMillis(&lt;update interval&gt;)\n.setMaxRenderedLength(&lt;max rendered length in terminal&gt;)\n.showSpeed();\n// or .showSpeed(new DecimalFormat(\"#.##\")) to customize speed display\n.setEtaFunction(state -&gt; ...)\n// This function is of type `ProgressState -&gt; Optional&lt;Duration&gt;` \n// that should output the estimated ETA of the progress.\n// Returning `Optional.empty()` means that ETA is not available.\nfor (T x : ProgressBar.wrap(collection, pbb)) {\n...\n}\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<ul> <li><code>0.10.0</code>:<ul> <li>New functionalities:<ul> <li>Make <code>me.tongfei.progressbar</code> a Java 9 module (#149, #153, #154). Thanks @clo-vis, @Kamillaova, @bowbahdoe !</li> <li>Enables the builder pattern for <code>ProgressBarStyle</code> (PR #152). Thanks @PakhomovAlexander !</li> </ul> </li> <li>Dependency version bump. </li> </ul> </li> <li><code>0.9.5</code>:<ul> <li>Bugfixes:<ul> <li>Fixed the problem of <code>ProgressState</code> not being public, thus making <code>setEtaFunction</code> useless (#147, PR #146). Thanks @deejgregor, @natanfudge !</li> <li>Correct handling of ANSI control characters in calculating the display length.</li> </ul> </li> <li>New functionalities:<ul> <li>Added a new <code>UNICODE_COLORFUL_BAR</code> style.</li> </ul> </li> </ul> </li> <li><code>0.9.4</code>:<ul> <li>New functionalities:<ul> <li>In <code>ProgressBarBuilder</code>s, one can now switch whether to show the remaining time, or to provide a custom   function to compute the remaining time (if the progress is not linear) (#131). Thanks @MagnusErikssonAB !</li> <li>In <code>ProgressBarBuilder</code>s, one can now set <code>.clearDisplayOnFinish()</code> to clear the display on terminals when    a progress is complete (#135). Thanks @mattparkins !</li> <li>Added a method <code>ProgressBar::isIndefinite</code> to check if a progress bar's max is unknown (#140). Thanks @lt3stus3el !</li> </ul> </li> <li>Bugfixes:<ul> <li>Fixed the bug of not drawing after resetting or stepping back caused by #91 (#124). Thanks @Bricktheworld !</li> <li>Suppress exceptions thrown in <code>Spliterator.estimateSize</code> and continue as if indefinite (#141). Thanks @seanf !</li> </ul> </li> <li>Dependency version bump.</li> </ul> </li> <li> <p><code>0.9.3</code>:</p> <ul> <li>New functionalities:<ul> <li>Supports for wrapping around <code>java.io.OutputStream</code>s and <code>java.io.Writer</code>s (#114). Thanks @azachar !</li> <li>Added <code>continuousUpdate</code> boolean parameter to various constructors and the <code>ProgressUpdateAction</code> so that long-running processes don't take forever to print something (#121, PR #120). Thanks @gaoagong !</li> </ul> </li> <li>Performance improvements:<ul> <li>Improved performance in rendered string building (PR #107). Thanks @heroesleo65 !</li> <li>Improved performance in <code>ConsoleProgressBarConsumer::accept</code> (PR #106). Thanks @heroesleo65 !</li> </ul> </li> <li>Bugfixes:<ul> <li>Displays a progress bar immediately after it starts, regardless of whether it has made any progress (#117). Thanks @azachar !</li> <li>Closing a progress bar will now force the progress bar to refresh (PR #110). Thanks @kmtong !</li> <li>Using a default <code>DecimalFormat</code> object if <code>isSpeedShown</code> is true as it will otherwise throw a <code>NullPointerException</code> during rendering (#121, PR #120). Thanks @gaoagong !</li> </ul> </li> <li>Dependency bump. Specifically:<ul> <li>Supports Apple M1 due to https://github.com/jline/jline3/issues/688 (PR #119). Thanks @snuyanzin !</li> </ul> </li> </ul> </li> <li> <p><code>0.9.2</code>:</p> <ul> <li>New functionalities:<ul> <li>Supports for wrapping around <code>java.io.Reader</code>s.</li> </ul> </li> <li>Bugfixes:<ul> <li>Fixed potential <code>StringIndexOutOfBoundsException</code> and improved performance in <code>trimDisplayLength</code> (PR #104). Thanks @heroesleo65 !</li> <li>Fixed the bug that incorrectly calculates string display length while displaying that results in last <code>)</code> truncated (#105).</li> </ul> </li> <li>Improvements:<ul> <li>Size now known when wrapping an array (PR #101). Thanks @seanf !</li> <li>Better estimation of initial max for spliterators (#102).</li> </ul> </li> <li>Misc:<ul> <li>Dependency version bump.</li> </ul> </li> </ul> </li> <li> <p><code>0.9.1</code>:</p> <ul> <li>Improvements:<ul> <li>Correct rendering of East Asian full-width characters as defined in Unicode TR11 (#75). Thanks @ImSejin and @fangyuzhong2016 !</li> <li>Only renders the progress bar when progress is made (#91). This improves the performance of progress bars. Thanks @elanzini !</li> <li>Added <code>setMaxRenderedLength</code> method to builders (#71). Thanks @koppor !</li> </ul> </li> <li>Misc:<ul> <li>Updates JUnit 4 to JUnit 5 (PR #93). Thanks @michaelsiepmann !</li> <li>Dependency version bump.</li> </ul> </li> </ul> </li> <li> <p><code>0.9.0</code>:</p> <ul> <li>New functionalities:<ul> <li>Supports the parallel display of multiple progress bars (PR #69), fixing #11. Thanks @vehovsky !</li> <li>Supports pausing and resuming progress bars (PR #56, PR #63), fixing #17. Thanks @mesat !</li> <li>Supports direct wrapping around arrays (#62).</li> <li>Supports customized max length for progress bars (#71). Thanks @koppor and @cloudnotify !</li> </ul> </li> <li>Bugfixes:<ul> <li>Fixes the bug of dividing-by-zero when extra message is too long on indefinite progress bars (PR #85), fixing #84. Thanks @AndreiNekrasOn and @rharder !</li> </ul> </li> <li>Misc:<ul> <li>Removed redundant <code>jline-terminal-jansi</code> dependency (#77). Thanks @zbateson !</li> <li>Added references to Kotlin extensions (#72). Thanks @heinrichreimer !</li> <li>Changed the permission level of some methods in <code>DefaultProgressBarRenderer</code> to \"protected\" to make it more extensible (#81). Thanks @ksvladimir !</li> <li>Dependency version bump.</li> </ul> </li> </ul> </li> <li> <p><code>0.8.1</code>:</p> <ul> <li>Bugfixes:<ul> <li>Fixed the bug of possible negative suffix length (PR #58). Thanks @kristofarkas !</li> <li>Fixed the issue of stepping by -1 when wrapped input stream is depleted (#60, PR #61). Thanks @mordechaim !</li> <li>Default value for initial max in progress bar builders should be -1, not 0 (#60, PR #61). Thanks @mordechaim !</li> </ul> </li> <li>Dependency version bump.</li> </ul> </li> <li> <p><code>0.8.0</code>:</p> <ul> <li>Supports loggers (PR #54) by factoring out progress bar consumers and renderers. This allows progress bars to be used with logging libraries such as SLF4J, hence fixing #12 and #18. Thanks @alexpeelman !</li> <li>Dependency version bump.</li> </ul> </li> <li> <p><code>0.7.4</code>:</p> <ul> <li>Fixes the bug of slow exit with fast jobs (#50, PR #51). Thanks @meawoppl @denisrosset !</li> <li>Dependency version bump.</li> </ul> </li> <li> <p><code>0.7.3</code>:</p> <ul> <li>Added support for customizing the decimal format of speed display (PR #49). Thanks @wfxr !</li> </ul> </li> <li> <p><code>0.7.2</code>:</p> <ul> <li>Added support for wrapping around <code>Spliterator</code>s and <code>Stream</code>s. Streams could be either sequential or parallel (#44). Thanks @michaelmior !</li> <li>Added support for displaying speed with unit (PR #43). Thanks @dani909 !</li> </ul> </li> <li> <p><code>0.7.1</code>:</p> <ul> <li>Fixed the problem of not properly closing the JLine <code>Terminal</code> object (#40). Thanks @voseldop !</li> <li>Suppressed JLine warning if a dumb terminal is created (partially fixed #42). Thanks @BuZZ-DEE !</li> <li>Documentation: <ul> <li>Moved <code>CHANGELOG.md</code> to the home directory and created a symlink in the <code>docs/</code> folder to it (PR #41). Thanks @koppor !</li> <li>Fixed bug (demo code was wrong) in the declarative usage section (PR #39). Thanks @AbhinavVishak !</li> </ul> </li> </ul> </li> <li> <p><code>0.7.0</code>:</p> <ul> <li>Utilized the try-with-resource pattern for the Java imperative syntax, deprecating <code>ProgressBar#start</code> and <code>ProgressBar#stop</code>.</li> <li>Introduced units for progress bar that enables showing the total amount of work in some unit (e.g. MB / GB) (#33).</li> <li>Introduced the builder pattern for constructing progress bars (instead of lots of different constructors).</li> <li>Added declarative usage that wraps around <code>InputStream</code>, which enables tracking the progress of reading a large file or stream (#34).</li> <li>Progress bars are now colorful by default using ANSI color codes.</li> <li>Documentation:<ul> <li>Brand new <code>mkdocs</code> Material-style documentation! </li> </ul> </li> </ul> </li> <li> <p><code>0.6.0</code>: </p> <ul> <li>Added declarative usage that wraps around <code>Iterator</code> and <code>Iterable</code>.</li> <li>Updated <code>jline</code> dependency to JLine 3. </li> <li>Fixed problem in IntelliJ console. Thanks @saidaspen, @albancolley, @felixdivo, @AbhinavVishak !</li> <li>Fixed warning about encoding during Maven build. Thanks @khmarbaise !</li> <li>Fixed Java version in Maven build. Thanks @ccamel !</li> </ul> </li> <li> <p><code>0.5.5</code>: Fixed the problem of the progress bar being stuck if it finishes too fast.   Fixed the problem of <code>StringIndexOutOfBoundsException</code> error when the console width is too small.   Thanks @bwittwer, @rholdberh and @bubyakin !</p> </li> <li><code>0.5.4</code>: Added indefinite progress bar support.</li> <li><code>0.5.3</code>: Type of max/current of a progress bar is changed from <code>int</code> to <code>long</code>. Thanks @vitobellini ! </li> <li><code>0.5.2</code>: Methods now returns <code>this</code>. This simplifies the initialization: Now you can do <code>pb = new ProgressBar(...).start()</code>. Extra messages  that are too long are trimmed properly. Thanks @mattcg !</li> <li><code>0.5.1</code>: Fixed the refresh problem when progress ended. Added style (Unicode block characters / pure ASCII) support.</li> <li><code>0.5.0</code>: Separated the progress bar thread from the main thread for better performance. Fixed the character offset issue. Thanks @rualpe !</li> <li><code>0.4.3</code>: Changed the symbols to box-drawing characters; more fine-grained display. Thanks @hrj !</li> <li><code>0.4.2</code>: Default output stream is changed to <code>System.err</code>; can be customized in constructor. Thanks @AluisioASG !</li> <li><code>0.4.1</code>: Added a <code>stepTo</code> method to <code>ProgressBar</code>s. Thanks @svenmauer !</li> <li><code>0.4.0</code>: Migrated from Scala to Java: less dependencies.</li> </ul>"},{"location":"declarative-usage/","title":"Declarative usage","text":"<p>Since Progressbar <code>0.6.0</code>, declarative usage is the preferred way of using a progress bar.</p> <p>Basically, one can wrap a stream/collection with <code>ProgressBar.wrap(...)</code> so that when iterating/reading/writing over it, a progress bar automatically tracks its progress. The type of your collection/stream does not change after wrapped with a progress bar. The collection/stream types supported are:</p> <ul> <li><code>T[]</code>;</li> <li><code>java.lang.Iterable&lt;T&gt;</code>;</li> <li><code>java.util.Iterator&lt;T&gt;</code>;</li> <li><code>java.io.InputStream</code> (can be regarded as an <code>Iterator&lt;Byte&gt;</code>);</li> <li><code>java.io.Reader</code> (can be regarded as an <code>Iterator&lt;Char&gt;</code>);</li> <li><code>java.io.OutputStream</code> (dual of <code>InputStream</code>);</li> <li><code>java.io.Writer</code> (dual of <code>Reader</code>);</li> <li><code>java.util.Spliterator&lt;T&gt;</code>;</li> <li><code>java.util.Stream&lt;T&gt;</code> (actually any <code>S</code> such that <code>S extends BaseStream&lt;T, S&gt;</code>. When wrapping over a primitive stream, boxing overhead may be incurred).</li> </ul> <p>The syntax for the method call is <pre><code>ProgressBar.wrap(collection, taskName)\n</code></pre> Or, if you want to use the builder pattern to customize the progress bar, use  <pre><code>ProgressBarBuilder pbb = new ProgressBarBuilder()\n.setXXX().setYYY();  // setting the builder\nProgressBar.wrap(iterable, pbb)\n</code></pre></p> <p>Examples:</p>"},{"location":"declarative-usage/#example-1-traverses-through-a-java-collection","title":"Example 1: Traverses through a Java collection","text":"<p>If the size of the collection is known, the progress bar's max will be automatically set as the size of the collection; otherwise the progress bar will be indefinite.</p> <pre><code>for (T x : ProgressBar.wrap(collection, \"Traversing\")) {\n...\n}\n</code></pre>"},{"location":"declarative-usage/#example-2-loops-over-an-integer-range","title":"Example 2: Loops over an integer range","text":"<p>Since <code>0.7.2</code>, tracking the progress of sequential or parallel Java streams is supported.  <pre><code>ProgressBar.wrap(IntStream.range(left, right).parallel(), \"Task\").forEach(i -&gt; {\n...\n});\n</code></pre></p>"},{"location":"declarative-usage/#example-3-reads-a-large-file-lazily","title":"Example 3: Reads a large file lazily","text":"<p>When wrapping around a <code>java.io.InputStream</code>, whether it is a <code>java.io.FileInputStream</code> will be detected. If successful, the file's full size in byte will be retrieved and set as the progress bar's max; otherwise, the progress bar will be indefinite.</p> <pre><code>ProgressBarBuilder pbb = new ProgressBarBuilder()\n.setTaskName(\"Reading\")\n.setUnit(\"MiB\", 1048576); // setting the progress bar to use MiB as the unit\n\ntry (Reader reader = new BufferedReader(new InputStreamReader(\nProgressBar.wrap(new FileInputStream(f), pbb)\n))) {\n...\n}\n</code></pre>"},{"location":"imperative-usage/","title":"Imperative usage","text":"<p>Since Progressbar <code>0.7.0</code>, Java try-with-resource pattern is used to ensure safe termination of progress bar threads.</p> <p>To use progress bars imperatively to support mutation to the progress bar in the progress (e.g. manually moving the cursor), use the following syntax:</p> <pre><code>try (ProgressBar pb = new ProgressBar(\"Test\", 100)) { // name, initial max\n// Use ProgressBar(\"Test\", 100, ProgressBarStyle.ASCII) if you want ASCII output style\nfor (T x : collection) {\n...\npb.step(); // step by 1\npb.stepBy(n); // step by n\n...\npb.stepTo(n); // step directly to n\n...\npb.maxHint(n);\n// reset the max of this progress bar as n. This may be useful when the program\n// gets new information about the current progress.\n// Can set n to be less than zero: this means that this progress bar would become\n// indefinite: the max would be unknown.\n...\npb.setExtraMessage(\"Reading...\"); // Set extra message to display at the end of the bar\n}\n} // progress bar stops automatically after completion of try-with-resource block\n</code></pre>"},{"location":"kotlin/","title":"Kotlin extensions","text":"<p>Kotlin DSL-like builders are available at reimersoftware/progressbar-ktx.</p>"},{"location":"loggers/","title":"Integrating with loggers","text":"<p>Integrating with loggers (e.g. <code>slf4j</code>) requires changes to how the progress bar is handled.</p> <p>To do this, a specific <code>DelegatingProgressBarConsumer</code> is required, with <code>logger::info</code> (or other logger levels) passed in as a lambda expression:</p> <pre><code>    // create logger using slf4j\nfinal Logger logger = LoggerFactory.getLogger(\"Test\");\n\ntry (ProgressBar pb = new ProgressBarBuilder()\n.setInitialMax(100)\n.setTaskName(\"Test\")\n.setConsumer(new DelegatingProgressBarConsumer(logger::info))\n.build()) {\n// your taskName here\n}\n</code></pre>"},{"location":"styles/","title":"Visual styles","text":""},{"location":"styles/#selecting-a-visual-style","title":"Selecting a visual style","text":"<p>Currently <code>progressbar</code> supports three visual style sets:</p> <ul> <li> <p><code>COLORFUL_UNICODE_BLOCK</code> (default): Rendered using Unicode box drawing symbols with ANSI colors. Good if your font is among Menlo, Fira Mono, Source Code Pro or SF Mono; and your terminal supports ANSI colors.</p> </li> <li> <p><code>UNICODE_BLOCK</code>: Rendered using Unicode box drawing symbols. </p> </li> <li> <p><code>ASCII</code>: Rendered using pure ASCII symbols. This is preferred if your terminal's font is either Consolas or Andale Mono.</p> </li> </ul> <p>To set these, using a progress bar builder with the <code>setStyle</code> method, passing in one of the enum values above. <pre><code>ProgressBarBuilder pbb = new ProgressBarBuilder()\n.setStyle(ProgressBarStyle.&lt;STYLE&gt;);\n</code></pre></p> <p>Since <code>0.10.0</code> you can customize the progress bar style also with a builder:</p> <pre><code>ProgressBarBuilder pbb = ProgressBar.builder()\n// ...\n.setStyle(ProgressBarStyle.builder()\n.colorCode((byte) 33)  // the ANSI color code\n.leftBracket(\"{\")\n.rightBracket(\"}\")\n.block('-')\n.rightSideFractionSymbol('+')\n.build()\n)\n// ...\n</code></pre>"}]}